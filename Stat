// Stat Class 활용 (int, flort, string, class)

using UnityEngine;
using System.Collections;
  
// 정수형 스택 클래스
public class CStackInt
{
    int emptyStack; // 빈스택 인덱스
    int[] items; // int 아이템 배열
    int top; // 현재 스택 커서(번호)
    int size; // 스택 크기(아이템 저장 갯수)
  
    // 스택 객체 생성자
    public CStackInt(int size)
    {
        this.size = size;
        items = new int[size];
        emptyStack = -1;
        top = emptyStack;
    }
  
    public void Push(int item)
    {
        items[++top] = item;
    }
  
    public int Pop()
    {
        return items[top--];
    }
  
    public bool IsFull()
    {
        return (top + 1) == size;
    }
  
    public bool IsEmpty()
    {
        return top == emptyStack;
    }
}
  
// 실수형 스택 클래스
public class CStackFloat
{
    int emptyStack; // 빈스택 인덱스
    float[] items; // float 아이템 배열
    int top; // 현재 스택 커서(번호)
    int size; // 스택 크기(아이템 저장 갯수)
  
    // 스택 객체 생성자
    public CStackFloat(int size)
    {
        this.size = size;
        items = new float[size];
        emptyStack = -1;
        top = emptyStack;
    }
  
    public void Push(float item)
    {
        items[++top] = item;
    }
  
    public float Pop()
    {
        return items[top--];
    }
  
    public bool IsFull()
    {
        return (top + 1) == size;
    }
  
    public bool IsEmpty()
    {
        return top == emptyStack;
    }
}
  
// 실수형 스택 클래스
public class CStackString
{
    int emptyStack; // 빈스택 인덱스
    string[] items; // float 아이템 배열
    int top; // 현재 스택 커서(번호)
    int size; // 스택 크기(아이템 저장 갯수)
  
    // 스택 객체 생성자
    public CStackString(int size)
    {
        this.size = size;
        items = new string[size];
        emptyStack = -1;
        top = emptyStack;
    }
  
    public void Push(string item)
    {
        items[++top] = item;
    }
  
    public string Pop()
    {
        return items[top--];
    }
  
    public bool IsFull()
    {
        return (top + 1) == size;
    }
  
    public bool IsEmpty()
    {
        return top == emptyStack;
    }
}
  
public class Monster {
    int level = 1;
    int hp = 100;
      
    public void PrintStat()
    {
        Debug.Log("level : " + level + ", hp : " + hp);
    }   
}
  
// 실수형 스택 클래스
public class CStackMonster
{
    int emptyStack; // 빈스택 인덱스
    Monster[] items; // float 아이템 배열
    int top; // 현재 스택 커서(번호)
    int size; // 스택 크기(아이템 저장 갯수)
  
    // 스택 객체 생성자
    public CStackMonster(int size)
    {
        this.size = size;
        items = new Monster[size];
        emptyStack = -1;
        top = emptyStack;
    }
  
    public void Push(Monster item)
    {
        items[++top] = item;
    }
  
    public Monster Pop()
    {
        return items[top--];
    }
  
    public bool IsFull()
    {
        return (top + 1) == size;
    }
  
    public bool IsEmpty()
    {
        return top == emptyStack;
    }
}
  
public class CStackTest : MonoBehaviour
{
  
    void Start()
    {
  
        // 제네릭 사용하지 않았을때 스택을 사용하는 코드
  
        int size = 5;
        CStackInt istack = new CStackInt(size);
  
        for (int i = 0; i < 7; i++)
        {
            if (!istack.IsFull())
            {
                istack.Push(i);
            }
            else
            {
                Debug.Log("스택이 꽉 찼습니다. [저장 실패 : " + i + "]");
            }
  
        }
  
        while (!istack.IsEmpty())
        {
            Debug.Log(istack.Pop());
        }
  
        CStackFloat fstack = new CStackFloat(size);
  
        for (int i = 0; i < 7; i++)
        {
            if (!fstack.IsFull())
            {
                fstack.Push(i * 1.2f);
            }
            else
            {
                Debug.Log("스택이 꽉 찼습니다. [저장 실패 : " + i + "]");
            }
  
        }
  
        while (!fstack.IsEmpty())
        {
            Debug.Log(fstack.Pop());
        }
  
        CStackString sstack = new CStackString(size);
  
        for (int i = 0; i < 7; i++)
        {
            if (!sstack.IsFull())
            {
                sstack.Push(i.ToString());
            }
            else
            {
                Debug.Log("스택이 꽉 찼습니다. [저장 실패 : " + i + "]");
            }
  
        }
  
        while (!sstack.IsEmpty())
        {
            Debug.Log(sstack.Pop());
        }
  
  
        CStackMonster monsterstack = new CStackMonster(size);
  
        for (int i = 0; i < 7; i++)
        {
            if (!monsterstack.IsFull())
            {
                Monster monster = new Monster();
                monsterstack.Push(monster);
            }
            else
            {
                Debug.Log("스택이 꽉 찼습니다. [저장 실패 : " + i + "]");
            }
  
        }
  
        while (!monsterstack.IsEmpty())
        {
            //monsterstack.Pop().PrintStat();
            Monster monster = monsterstack.Pop();
            monster.PrintStat();
        }
  
    }
}
 
